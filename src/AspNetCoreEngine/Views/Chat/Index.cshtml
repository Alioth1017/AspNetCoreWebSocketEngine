
@{
    ViewData["Title"] = "Index";
}
<style>
    .el-header, .el-footer {
        background-color: #DDF0ED;
        border: 1px solid #808080;
        color: #333;
        text-align: center;
        line-height: 60px;
    }

    .el-aside {
        background-color: #DDF0ED;
        border: 1px solid #808080;
        color: #333;
        line-height: 100%;
    }

    .el-main {
        background-color: #DDF0ED;
        border: 1px solid #808080;
        color: #333;
        line-height: 100%;
    }

    body > .el-container {
    }


    .el-container:nth-child(5) .el-aside,
    .el-container:nth-child(6) .el-aside {
        line-height: 260px;
    }

    .el-container:nth-child(7) .el-aside {
        line-height: 320px;
    }

    html, body, #app, .el-container {
        height: 100%;
    }
</style>

<div id="app">
    <el-container>
        <el-header>Asp.Net Core WebSocket Engine</el-header>
        <el-container>
            <el-aside>

                <el-radio-group v-model="isCollapse" style="margin-bottom: 20px;">
                    <el-radio-button :label="false">展开</el-radio-button>
                    <el-radio-button :label="true">收起</el-radio-button>
                </el-radio-group>
                <el-menu default-active="1-4-1" class="el-menu-vertical-demo"
                         @@open="handleOpen" @@close="handleClose" :collapse="isCollapse"
                         @@select="handleSelect">
                    <el-submenu index="1">
                        <template slot="title">
                            <i class="el-icon-location"></i>
                            <span slot="title">我的好友</span>
                        </template>
                        <el-menu-item-group>
                            <span slot="title">在线好友</span>
                            <el-menu-item v-for="item in users"
                                          :key="item.value"
                                          :index="item.value"
                                          @@click="itemclick(item.value)">{{item.name}}</el-menu-item>
                        </el-menu-item-group>

                    </el-submenu>

                </el-menu>
            </el-aside>
            <el-main>
                <el-tabs type="border-card" style="height:80%">
                    <el-tab-pane>
                        <span slot="label"><i class="el-icon-date"></i> 聊天室</span>
                        <div>

                        </div>
                    </el-tab-pane>
                    <el-tab-pane label="消息中心">消息中心</el-tab-pane>
                    <el-tab-pane label="角色管理">角色管理</el-tab-pane>
                    <el-tab-pane label="定时任务补偿">定时任务补偿</el-tab-pane>
                </el-tabs>
                <el-row  style="height:20%">
                    
                    <el-col span="22">
                        <el-input type="textarea"
                                  :rows="4"
                                  placeholder="请输入聊天内容"
                                  v-model="textarea">
                        </el-input>
                    </el-col>
                    <el-col span="2">
                        <el-button style="height:90px;width:100%" type="success"  size="medium">发送</el-button>
                    </el-col>
                </el-row>

            </el-main>
        </el-container>

        <el-footer>
           
            status:connected<i class="el-icon-success" style="color:green"></i>

        </el-footer>
    </el-container>
</div>

@section Js{

    <script>
        var socket;
        
        var v = new Vue({
            el: '#app'
            ,
            data: {
                isCollapse: false,
                users: [{ name: 'ny', value: '123' },
                    { name: 'ny1', value: '1231' }],
                connected : false,
            },
            methods: {
                handleOpen(key, keyPath) {
                    console.log(key, keyPath);
                },
                handleClose(key, keyPath) {
                    console.log(key, keyPath);
                },
                handleSelect(key, keyPath) {
                    console.log(key, keyPath);
                },
                itemclick(val) {
                    console.log(val);
                }
            },
            mounted: function () {
                var that = this;
                that.$message({
                    showClose: true,
                    message: '开始连接服务器',
                    type: 'success'
                });

                var scheme = document.location.protocol == "https:" ? "wss" : "ws";
                var port = document.location.port ? (":" + document.location.port) : "";
                var url = scheme + "://" + document.location.hostname + port;
                socket = new WebSocket(url);
                socket.onopen = function (event) {
                    console.log(socket.readyState);
                    that.$message({
                        showClose: true,
                        message: '连接成功',
                        type: 'success'
                    });
                };
                socket.onclose = function (event) {
                    console.log(socket.readyState);
                };
                socket.onerror = function (event) {
                    console.log(socket.readyState);
                };
                socket.onmessage = function (event) {
                    console.log(socket.readyState);
                };
            }

        })


    </script>

}

