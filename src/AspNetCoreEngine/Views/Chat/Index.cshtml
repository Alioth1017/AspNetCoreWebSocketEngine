
@{
    ViewData["Title"] = "Index";
}
<style>
    .el-header, .el-footer {
        background-color: #DDF0ED;
        border: 1px solid #808080;
        color: #333;
        text-align: center;
        line-height: 60px;
    }

    .el-aside {
        background-color: #DDF0ED;
        border: 1px solid #808080;
        color: #333;
        height: 500px;
    }

    .el-main {
        background-color: #DDF0ED;
        border: 1px solid #808080;
        color: #333;
        height: 500px;
       overflow-y:hidden;
    }

    body > .el-container {
    }

    .messages {
        list-style: none;
        font-family:微软雅黑;
        font-size:12px;
        vertical-align:central;
    }

    .messages {
        overflow: auto;
        padding: 5px;
    }

        .messages li {
            margin-top: 10px;
            padding-left: 10px;
            display: block;
            clear: both;
            overflow: hidden;
        }

            .messages li img {
                float: left;
            }
            .messages li label {
                float: left;
                padding: 10px 0px 10px 10px;
                margin: 6px 0px 0 10px;
            }

            .messages li span {
                background: #7cfc00;
                padding: 10px;
                border-radius: 10px;
                float: left;
                margin: 6px 10px 0 10px;
                max-width: 310px;
                border: 1px solid #ccc;
                box-shadow: 0 0 3px #ccc;
            }

            .messages li img.imgleft {
                float: left;
            }

            .messages li img.imgright {
                float: right;
            }

            .messages li label.imgleft {
                float: left;
            }

            .messages li label.imgright {
                float: right;
            }

            .messages li span.spanleft {
                float: left;
                background: #7cfc00;
            }

            .messages li span.spanright {
                float: right;
                background: #7cfc00;
            }   
</style>

<div id="app">
    <el-container>
        <el-header>Asp.Net Core WebSocket Engine</el-header>
        <el-container>
            <el-aside>

                <el-radio-group v-model="isCollapse" style="margin-bottom: 20px;">
                    <el-radio-button :label="false">展开</el-radio-button>
                    <el-radio-button :label="true">收起</el-radio-button>
                </el-radio-group>
                <el-menu default-active="1-4-1" class="el-menu-vertical-demo"
                         @@open="handleOpen" @@close="handleClose" :collapse="isCollapse"
                         @@select="handleSelect">
                    <el-submenu index="1">
                        <template slot="title">
                            <i class="el-icon-location"></i>
                            <span slot="title">我的好友</span>
                        </template>
                        <el-menu-item-group>
                            <span slot="title">在线好友</span>
                            <el-menu-item v-for="item in users"
                                          :key="item.SessionId"
                                          :index="item.SessionId"
                                          @@click="itemclick(item.Name)">{{item.Name}}</el-menu-item>
                        </el-menu-item-group>

                    </el-submenu>

                </el-menu>
            </el-aside>
            <el-main>
                <el-tabs type="border-card" style="height:350px">
                    <el-tab-pane style="height:330px;">
                        <span slot="label"><i class="el-icon-date"></i> 公共聊天室</span>
                        <div style="height:280px;">
                            <ul class="messages" v-chat-scroll style="height:260px;overflow-y:scroll;">
                                <li v-for="item in msgs">
                                    <label class="imgleft">{{item.from}} : </label>
                                    <span class="spanleft">{{item.msg}}</span>
                                </li>
                            </ul>
                        </div>
                    </el-tab-pane>
                   
                </el-tabs>
                <el-row style="height:100px;background-color:#f2f2f2;border:1px;">
                    <el-col style="padding:2px 10px 2px 10px;">
                        字体 表情 图片 附件
                    </el-col>
                    <el-col id="txtinput" :span="22">
                        <el-input type="textarea"
                                  :rows="4"
                                  placeholder="请输入聊天内容"
                                  v-model="msg">
                        </el-input>
                    </el-col>
                    <el-col :span="2">
                        <el-button style="height:95px;width:100%" type="success" @@click="sendMsg" size="medium">发送</el-button>
                    </el-col>
                </el-row>

            </el-main>
        </el-container>

        <el-footer>

            <span v-if="connected">
                status:connected<i class="el-icon-success" style="color:green"></i>

            </span>
            <span  v-else>
                status:closed<i class="el-icon-warning" style="color:red"></i>
            </span>
        </el-footer>
    </el-container>
</div>

@section Js{
    <script src="~/js/vue-chat-scroll.js"></script>
    <script>
        var socket;

        var v = new Vue({
            el: '#app'
            ,
            data: {
                isCollapse: false,
                users: [],
                connected: false,
                msg: "",
                msgs: new Array({ from: "服务器", msg: "请输入文本点击发送！" })
            },
            methods: {
                handleOpen(key, keyPath) {
                    console.log(key, keyPath);
                },
                handleClose(key, keyPath) {
                    console.log(key, keyPath);
                },
                handleSelect(key, keyPath) {
                    console.log(key, keyPath);
                },
                itemclick(val) {
                    console.log(val);
                },
                msgEvent(msg) {

                    //console.log(msg);
                    var cmd = msg.cmd;
                    var content = msg.msg;
                    if (cmd == "updateuser") {
                        this.users = content;
                    }
                    if (cmd == "toall") {
                        this.msgs.push({ from: content.from, msg: content.msg });
                    }
                },
                sendMsg() {
                    var val = this.msg;
                    socket.send(
                        JSON.stringify({ cmd: "toall", msg: val })
                    );
                    this.msg = "";
                }
            },
            mounted: function () {
                var that = this;
                that.$message({
                    showClose: true,
                    message: '开始连接服务器',
                    type: 'success'
                });

                var scheme = document.location.protocol == "https:" ? "wss" : "ws";
                var port = document.location.port ? (":" + document.location.port) : "";
                var url = scheme + "://" + document.location.hostname + port;//+"/chat";
                socket = new WebSocket(url);
                socket.onopen = function (event) {
                    console.log(socket.readyState);
                    that.connected = true;
                    that.$message({
                        showClose: true,
                        message: '连接成功',
                        type: 'success'
                    });
                };
                socket.onclose = function (event) {
                    that.connected = false;
                    console.log(socket.readyState);
                };
                socket.onerror = function (event) {
                    that.connected = false;
                    console.log(socket.readyState);
                };
                socket.onmessage = function (event) {
                    that.msgEvent(JSON.parse(event.data));

                };
            }

        })


    </script>

}

